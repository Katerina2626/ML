# -*- coding: utf-8 -*-
"""1 практическая ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PzdZUbOCfKIzqgRCUm96Tto1tlnAniRm

# Практическая работа 1-1 Numpy

1. Скачайте этот ноутбук к себе.
2. Заполните пропущенные ячейки, отвечая на заданные вопросы. Там должен быть код! (если не сказано обратное)
3. Сохраните результат в своём гитхаб репозитории.

#### Полезная литература

- http://www.numpy.org/
- https://jakevdp.github.io/PythonDataScienceHandbook/02.00-introduction-to-numpy.html
- https://docs.scipy.org/doc/numpy/user/quickstart.html

1) Импортировать numpy и написать версию
"""

import numpy
numpy.__version__

"""2) Создать нулевой вектор размера 10"""

import numpy as np
x=np.zeros(10)
x

"""3) Создать вектор заполненный 7-ами размера 7"""

np.full((1, 7), 7)

"""4) Создать вектор заполненный четными числами от 10 до 100"""

np.arange(10, 101, 2)

"""5) Создать массив случайных чисел и развернуть его задом наперёд"""

ar=np.random.randint(0, 10, (2,3))
#print(ar)
print(ar[::-1])

"""6) Создать двумерную матрицу размера 3 на 3, заполненную числами от 0 до 9 (от 0 до 9, это 10 цифр, в 9 позиций они не встанут)"""

np.array([range(i, i + 3) for i in [0, 3, 6]])

"""7) Создать матрицу размера 4 на 4 с единицами на диагонали смещеной на один наверх."""

import numpy as np
n = 4
b = np.zeros((n,n))
k=0
for i in range(4):
  for j in range(4):
    if j==k:
      b[i][j]=1
  k+=1
print(b)

"""8) Создать матрицу с числами в диапазоне от 1 до 4 по диагонали. В других ячейках матрицы должны быть семерки."""

import numpy as np
n = 4
b=np.full((4,4), 7)
k=0
for i in range(4):
  for j in range(4):
    if j==k:
      b[i][j]=k+1
  k+=1
print(b)

"""9) Создать матрицу размера 5 на 5 заполненную чилами от 0 до 4 в строках."""

np.array([range(i, i + 5) for i in [0, 0,0,0,0]])

"""10) Создать матрицу случайных чисел размера 10 на 10 и отнять среднее по строкам из каждого элемента строки"""

from statistics import mean
ar=np.random.randint(0, 10, (10,10))
print(ar)
for i in range(10):
  sr=mean(ar[i])
  for j in range(10):
    ar[i][j]-=sr
print(ar)

"""11) Создать матрицу случайных чисел размера 10 на 10 и отнять медиану по столбцам из каждого элемента столбца  """

from statistics import *
ar=np.random.randint(0, 10, (10,10))
print(ar)
print(" ")
for i in range(10):
  med=median([ar[4][i],ar[5][i]])
  for j in range(10):
    ar[j][i]-=med
print(ar)

"""12) Создать матрицу случайных чисел 5x5. Добавить к ней столбецы максимумов и минимумов по строкам. Получится матрица 5x7.

from random import *
ar=np.random.randint(0, 10, (5,5))
mn=[]
mx=[]
print(ar)
for i in range(5):
  mn.append(min(ar[i]))
  mx.append(max(ar[i]))
new=np.zeros((5,2))
ar=np.append(ar,new,axis=1)

print(ar)
"""

# Создаем матрицу случайных чисел 5x5
ar = np.random.randint(0, 10, (5, 5))

# Создаем массивы для минимумов и максимумов по строкам
mn = np.min(ar, axis=1)
mx = np.max(ar, axis=1)

# Объединяем матрицу с массивами минимумов и максимумов
new_matrix = np.column_stack((ar, mn, mx))

print(new_matrix)

"""13) Вектор чисел от 1 до 51 преобразовать в вектор нечетных чисел и в вектор четных чисел, поменять их размерности, чтобы получились две матрица. Найти произведение этих матриц. Найти обратную матрицу этого произведения.  """

ar=np.arange(1,51)
print(ar)
ch=ar[ar%2==0]
nch=ar[ar%2!=0]
ch=ch.reshape(5, 5)
nch=nch.reshape(5,5)
#print(ch)
#print(nch)
new = np.dot(ch, nch)
print(new)
#obr= np.linalg.inv(new) # я не знаю что не так, меня опять послали гуглить, гугл тоже не в курсе что он хочет :(
new2=np.array([new]).T
#print(np.linalg.inv(new))
#new2=new.T()
print(new2)

"""14) Создать 8x8 матрицу и заполнить её в шахматном порядке нулями и единицами."""

# создаем матрицу 8х8 заполненную нулями
ar = np.zeros((8, 8), dtype=int)
# используем срезы, чтобы заполнить каждую вторую строку и столбец нулями
ar[1::2, ::2] = 1
#print(ar)
ar[::2, 1::2] = 1

print(ar)

