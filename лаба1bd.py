# -*- coding: utf-8 -*-
"""Лаба1bd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D4kl0YOheA5A21uFxlwa_oq4jp1tsNVy

# **Начало работы с API**

## **Обзор**
"""



"""### **Чему вы научитесь**
В этом разделе вы узнаете:
1. Как использовать библиотеку Requests с публичными API
2. Как анализировать данные JSON, возвращаемые API

### **Предварительные условия**
Прежде чем приступить к работе с этим разделом, вы должны иметь представление о:
1. [JSON](https://colab.research.google.com/github/HackBinghamton/Webscraping-APIsWorkshop/blob/master/APIs/JSON.ipynb)
2. [Запросы](https://colab.research.google.com/github/HackBinghamton/Webscraping-APIsWorkshop/blob/master/APIs/Requests.ipynb)

### **Введение**
API означает **Интерфейс прикладного программирования**. API позволяют пользователям и разработчикам взаимодействовать со службами компании посредством кода, упрощая взаимодействие различных платформ и приложений друг с другом.

В этой части семинара мы рассмотрим подробный пример простого API извлечения данных, а затем рассмотрим основы более продвинутых API.

### **Выбор API**
Прежде чем мы сможем начать использовать API, нам необходимо изучить и найти тот API, который нам нужен. Отличное место для начала — [этот](https://github.com/public-apis/public-apis) репозиторий Github, который содержит ссылки на сотни общедоступных API, отсортированных по категориям.

На этой странице вы заметите, что к каждому API прикреплено три разных поля: **Auth**, **HTTPS** и **CORS**. Поле Auth сообщит вам, нужно ли вам создавать авторизованную учетную запись перед использованием API. Если вы видите *Нет* в поле Auth одного из этих API, то, как правило, его может использовать кто угодно и для чего угодно. Однако если для API требуется APIKey или OAuth, он обычно будет бесплатным только в том случае, если вы используете его для проекта, от которого вы не получите прибыли. Поля HTTPS и CORS обычно можно игнорировать.

# **API SpaceX**


---


Поскольку космос нравится всем (и Илону Маску), для начала мы собираемся использовать API SpaceX. В репозитории общедоступных API вы заметите, что API SpaceX не требует авторизации, поэтому этот API можно использовать бесплатно. Если вы хотите узнать больше об API SpaceX, вы можете найти его репозиторий на Github [здесь](https://github.com/r-spacex/SpaceX-API). Давайте погрузимся!

#### **Настройка**
Для начала нам нужно импортировать библиотеку запросов и указать URL-адрес нашего API. URL-адрес, который мы используем, будет меняться в зависимости от того, какую информацию мы хотим получить от API. Сейчас мы будем использовать https://api.spacexdata.com/v3/launches.
чтобы получить информацию обо всех различных запусках ракет SpaceX. Ознакомьтесь с документацией, указанной выше, если вы хотите узнать о некоторых других вещах, которые вы можете делать с помощью API SpaceX, включая отслеживание местоположения Rocketman Tesla Roadster на орбите!
"""

import requests
url = "https://api.spacexdata.com/v3/launches"

"""Теперь, когда у нас есть URL-адрес API, мы можем использовать запросы для получения информации из этого API.

#### **Оформление запроса**
"""

rockets = requests.get(url)
print(rockets)

"""Итак, `requests.get()` предоставил нам **HTTP-ответ**, содержащий нужную нам информацию, но сейчас он не в удобном для использования формате. Вы можете видеть, что если мы попытаемся распечатать здесь «ракеты», все, что мы получим, это «<Response [200]>». Самое замечательное в библиотеке запросов то, что она имеет встроенную функцию `.json()` для преобразования этого HTTP-ответа в формат JSON."""

jsonrockets = rockets.json()
print(jsonrockets)

"""Теперь мы взяли наш HTTP-ответ и превратили его в *чрезвычайно* большой **объект JSON**, который можно начать использовать.

Если вам интересно, как эти 4 строки кода могут дать вам столько информации, попробуйте посетить URL-адрес, который мы использовали в вашем браузере: https://api.spacexdata.com/v3/launches. Вы должны заметить, что распечатанный нами объект JSON содержит точно такую же информацию, отображаемую на этой веб-странице.

Поскольку этот API довольно прост, все, что он делает, это возвращает объект JSON, полный информации, через стандартный HTTP-ответ. Единственная разница между вызовом `requests.get()` по URL-адресу и посещением его в браузере заключается в том, что ваш браузер будет отображать содержимое HTTP-ответа, а `requests.get()` вернет ответ в виде значения.

#### **Фильтрация данных**

Теперь мы можем начать получать нужные данные из этого объекта JSON. Давайте попробуем получить **список всех ракет, которые SpaceX успешно запустила**. Поскольку мы видим, что этот объект JSON начинается как список (первый символ — '['), мы можем сначала начать с цикла по этому списку.
"""

for launch in jsonrockets:
  print(launch)

"""Как видите, теперь гораздо проще определить, как отформатирован этот объект JSON. **Каждый элемент внешнего списка представляет собой словарь** информации об одной попытке запуска. Эта информация включает название миссии, год запуска и многое другое. Чтобы увидеть все поля, содержащиеся в этих словарях, может потребоваться много чтения, но сейчас давайте проверим поле под названием «launch_success»."""

import requests
url = "https://api.spacexdata.com/v3/launches"
rockets = requests.get(url)
jsonrockets = rockets.json()

for launch in jsonrockets:
  print(launch["launch_success"])

"""Теперь давайте сделаем что-нибудь полезное с этой информацией: **каждый раз, когда мы сталкиваемся с успешным запуском, мы распечатываем ссылку на статью в Википедии об этом запуске**. Страница Википедии каждого запуска находится в поле «Ссылки», которое также является словарем.

Подобная вложенная логика JSON может сбивать с толку, особенно если в каждом объекте много полей, как в этом примере. **Полезно рассматривать слои объекта JSON как папки на компьютере**, поскольку каждый слой может содержать как информацию, так и дополнительные слои. В этом примере мы сначала открываем самую внешнюю папку **launch**. Внутри этой папки есть много других папок и фрагментов информации, но мы хотим открыть папку **links**. Опять же, в папке ссылок много папок и элементов, но мы хотим открыть папку **википедия**. Внутри этой папки находится вся необходимая нам информация, поэтому мы можем перестать углубляться в более глубокие папки.
"""

for launch in jsonrockets:
  if(launch["launch_success"] == True):
    print(launch["links"]["wikipedia"])

"""**Теперь мы успешно получили ссылку на Википедию о каждом успешном запуске ракеты SpaceX, всего за 7 строк кода!** Подобные API невероятно мощны из-за количества информации, которую вы можете собрать, используя лишь небольшую часть работа.

# Самостоятельная работа

1. Посмотреть документацию к API GitHub, разобраться как вывести список репозиториев для конкретного пользователя, сохранить JSON-вывод в файле *.json.
"""

import requests
import json

url = 'https://api.github.com'
user='bosenkotm'

r = requests.get(f'{url}/users/{user}/repos')

with open('data.json', 'w') as f:
    json.dump(r.json(), f)

def get_repositories(username):
    url = f'https://api.github.com/users/{username}/repos'
    response = requests.get(url)
    repositories = response.json()

    return repositories

def save_json(repositories):
    with open('repositories.json', 'w') as file:
        json.dump(repositories, file)

# Замените 'username' на нужное имя пользователя
username = 'bosenkotm'
repositories = get_repositories(username)
print(repositories)
save_json(repositories)

"""2. Изучить список открытых API. Найти среди них любое, требующее авторизацию (любого типа). Выполнить запросы к нему, пройдя авторизацию через curl, Postman, Python.Ответ сервера записать в файл (приложить скриншот для Postman и curl) https://github.com/public-apis/public-apis#readme"""

url = 'https://cloud-api.yandex.net/v1/'
token = 'AgAAAAA36-93AAXfhDqmJRBWtk38kNEIyZNsR3M'
headers = {
    'Content-Type': 'application/json', \
    'Authorization': token
}
disk_info = 'disk'
folder_info = 'disk/resources'
disk = requests.get(f'{url}{disk_info}')
disk.json()
disk = requests.get(f'{url}{disk_info}', headers = headers)
disk.json()
disk = requests.get(f'{url}{folder_info}?path=app:/', headers = headers)
for i in disk.json()['_embedded']['items']:
    print(i['name'])
with open('disk.json', 'w') as f:
    json.dump(disk.json(), f)